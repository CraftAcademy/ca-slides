!!! ca

name: inverse
layout: true
class: center, middle, inverse
---
# Active Record
## Migrations and CRUD functions
---
layout: false
.left-column[
  ## Model naming conventions
]
.right-column[
  Single thing, like `Dinosaur`. Rails will automatically pluralize in the right context.

  Camelcase: `ShoppingCart`
]
---
layout: false
.left-column[
  ## Model generators
]
.right-column[
  Creating a `Dinosaur` model.
  ```
  rails g model Dinosaur
  ```
  Creates a model:
  ```
  class Dinosaur < ApplicationRecord
  end
  ```
  Also creates a migration file:
  ```
  class CreateDinosaurs < ActiveRecord::Migration[5.0]
    def change
      create_table :dinosaurs do |t|

        t.timestamps
      end
    end
  end
  ```
]
---
layout: false
.left-column[
  ## Migrations
]
.right-column[
  Updating our `Dinosaur` model.
  ```
  rails g migration AddNameToDinosaur name:string
  ```
  Creates a migration file:
  ```
  class AddNameToDinosaur < ActiveRecord::Migration[5.0]
    def change
      add_column :dinosaurs, :name, :string
    end
  end
  ```
]
---
layout: false
.left-column[
  ## Migrations
  ## Running the migration
]
.right-column[
  Updating our `Dinosaur` model.
  ```
  rails g migration AddNameToDinosaur name:string
  ```
  Creates a migration file:
  ```
  class AddNameToDinosaur < ActiveRecord::Migration[5.0]
    def change
      add_column :dinosaurs, :name, :string
    end
  end
  ```
  `rails db:migrate` Now the schema looks like:
  ```
  ActiveRecord::Schema.define(version: 20161212153839) do

    # These are extensions that must be enabled in order to support this database
    enable_extension "plpgsql"

    create_table "dinosaurs", force: :cascade do |t|
      t.datetime "created_at", null: false
      t.datetime "updated_at", null: false
      t.string   "name"
    end

  end
  ```
]
---
template: inverse

# Never directly edit the schema!
## If you make a mistake and need to change things, create a new migration.
---
layout: false
.left-column[
  ## CRUD functions
]
.right-column[
### - Create
### - Read
### - Update
### - Delete
]
---
layout: false
.left-column[
  ## Create
]
.right-column[
```
dinosaur = Dinosaur.create(name: 'Amber')
```
]
---
layout: false
.left-column[
  ## Create
  ## Multi-step Create
]
.right-column[
```
dinosaur = Dinosaur.create(name: 'Amber')
```
```
dinosaur = Dinosaur.new
dinosaur.name = 'Amber'
dinosaur.save
```
]
---
layout: false
.left-column[
  ## Read Functions
]
.right-column[
```
@dinosaurs = Dinosaur.all
```
```
2.3.0 :005 > dinosaur.all
  dinosaur Load (0.6ms)  SELECT "dinosaurs".* FROM "dinosaurs"
 => #<ActiveRecord::Relation [#<dinosaur id: 1,
   created_at: "2016-12-12 15:54:03",
   updated_at: "2016-12-12 15:54:03", name: "Amber">]>
```
```
Dinosaur.first
Dinosaur.last
Dinosaur.find_by(name: 'Amber')
Dinosaur.find(params[:id])
Dinosaur.where(city: 'Gothenburg')
Dinosaur.count
```
]
---
layout: false
.left-column[
  ## Update
]
.right-column[
```
dinosaur = Dinosaur.find_by(name: 'Amber')
dinosaur.update(name: 'Badass')
```
]
---
layout: false
.left-column[
  ## Delete
]
.right-column[
```
dinosaur = Dinosaur.find_by(name: 'Amber')
dinosaur.destroy
```
]
---
layout: false
.left-column[
  ## Validations
]
.right-column[
```
class dinosaur < ApplicationRecord
  validates_presence_of :name
end
```
```
2.3.0 :001 > @dinosaur = Dinosaur.new
 => #<dinosaur id: nil, created_at: nil,updated_at: nil,
   name: nil>
2.3.0 :002 > @dinosaur.save
   (0.4ms)  BEGIN
   (0.3ms)  ROLLBACK
 => false
```
]
---
layout: false
.left-column[
  ## Validations
  ## Validation Errors
]
.right-column[
```
class Dinosaur < ApplicationRecord
  validates_presence_of :name
end
```
```
2.3.0 :001 > @dinosaur = Dinosaur.new
 => #<dinosaur id: nil, created_at: nil,updated_at: nil,
   name: nil>
2.3.0 :002 > @dinosaur.save
   (0.4ms)  BEGIN
   (0.3ms)  ROLLBACK
 => false
```
```
2.3.0 :004 > @dinosaur.errors.messages
 => {:name=>["can't be blank"]}
2.3.0 :005 > @dinosaur.errors.full_messages
 => ["Name can't be blank"]
```
]
---
layout: false
.left-column[
  ## Factories
]
.right-column[
```
FactoryGirl.define do
  factory :dinosaur do
    species: 'MySpecies'
    age: 'Jurassic'
    museum_number: 1
  end
end
```
```
FactoryGirl.create(:dinosaur)
FactoryGirl.create(:dinosaur, species: 'Pterodactyl')
```
]
